环境：ubuntu16.04.3 

1、配置GRUB启动选项
vi /etc/default/grub 

2、开启cgroup配置
GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"
  
3、打开内核配置
vi config-4.4.0-87-generic

CONFIG_RESOURCE_COUNTERS=y
CONFIG_MEMCG=y
CONFIG_MEMCG_SWAP=y
CONFIG_MEMCG_SWAP_ENABLED=y
CONFIG_MEMCG_KMEM=y

4、更新grub配置
update-grub

5、复位vm
reboot

6、查看
cat /proc/cmdline

BOOT_IMAGE=/boot/vmlinuz-4.4.0-87-generic root=UUID=42e977c3-cacb-4b34-9847-770c6846c9d4 ro cgroup_enable=memory swapaccount=1 quiet

7、docker info
告警消失


8、启动etcd
docker run \
    --net=host \
    -d \
    gcr.io/google_containers/etcd:2.0.12 \
    /usr/local/bin/etcd \
    --addr=127.0.0.1:4001 \
    --bind-addr=0.0.0.0:4001 \
    --data-dir=/var/etcd/data 

9、启动master服务

docker run \
    --volume=/:/rootfs:ro \
    --volume=/sys:/sys:ro \
    --volume=/dev:/dev \
    --volume=/var/lib/docker/:/var/lib/docker:ro \
    --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
    --volume=/var/run:/var/run:rw \
    --net=host \
    --pid=host \
    --privileged=true \
    -d \
    gcr.io/google_containers/hyperkube:v1.0.1 \
    /hyperkube kubelet --containerized \
    --hostname-override="127.0.0.1" --address="0.0.0.0" \
    --api-servers=http://localhost:8080 \
    --config=/etc/kubernetes/manifests
	
这一步实际上运行的是 kubelet ，并启动了一个包含其他master组件的[pod](../userguide/pods.md）。


10、运行service proxy
docker run \
    -d \
    --net=host \
    --privileged \
    gcr.io/google_containers/hyperkube:v1.0.1 \
    /hyperkube proxy --master=http://127.0.0.1:8080 --v=2



11、测试

此时你应该已经运行起了一个Kubernetes集群。你可以下载kubectl二进制程序进行测试：

(OS X) (linux)
注意： 再OS/X上你需要通过ssh设置端口转发：

boot2docker ssh -L8080:localhost:8080
列出集群中的节点：

kubectl get nodes
应该输出以下内容：

NAME LABELS STATUS
127.0.0.1 Ready
如果你运行了不同的Kubernetes集群，你可能需要指定 -s http://localhost:8080 选项来访问本地集群。

12、运行一个应用

kubectl -s http://localhost:8080 run nginx --image=nginx --port=80
运行 docker ps 你应该就能看到nginx在运行。下载镜像可能需要等待几分钟。

13、暴露为service

kubectl expose rc nginx --port=80
运行以下命令来获取刚才创建的service的IP地址。有两个IP，第一个是内部的

（CLUSTER_IP），第二个是外部的负载均衡IP。

kubectl get svc nginx
同样你也可以通过运行以下命令只获取第一个IP（CLUSTER_IP）：

kubectl get svc nginx --template={{.spec.clusterIP}}
通过第一个IP（CLUSTER_IP）访问服务：

curl <insert-cluster-ip-here>
注意如果再OSX上需要再boot2docker虚拟机上运行curl。

14、关于关闭集群的说明

上面的各种容器都是运行在 kubelet 程序的管理下，它会保证容器一直运行，甚至容器意外退出时也不例外。所以，如果想关闭集群，你需要首先关闭 kubelet 容器，再关闭其他。

可以使用 docker kill $(docker ps -aq) 。注意这样会关闭Docker下运行的所有容器，请谨慎使用。

15、下载镜像
docker pull gcr.io/google_containers/etcd:2.0.12
docker pull gcr.io/google_containers/hyperkube:v1.0.1
